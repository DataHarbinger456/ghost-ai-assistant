import { writeFile, mkdir, access } from 'fs/promises';
import { join, dirname } from 'path';
import { Lifelog } from '../types/lifelogs';

export class TranscriptStorage {
  private readonly transcriptsDir: string;

  constructor(baseDir: string = process.cwd()) {
    this.transcriptsDir = join(baseDir, 'transcripts');
  }

  /**
   * Ensure the transcripts directory exists
   */
  private async ensureDirectory(): Promise<void> {
    try {
      await access(this.transcriptsDir);
    } catch {
      await mkdir(this.transcriptsDir, { recursive: true });
    }
  }

  /**
   * Generate a safe filename from a lifelog title and date
   */
  private generateFilename(lifelog: Lifelog): string {
    const date = new Date(lifelog.startTime);
    const dateStr = date.toISOString().split('T')[0]; // YYYY-MM-DD
    const timeStr = date.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS

    // Clean title for filename (remove special chars, limit length)
    const cleanTitle = lifelog.title
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .substring(0, 50);

    return `${dateStr}_${timeStr}_${cleanTitle}_${lifelog.id.substring(0, 8)}.md`;
  }

  /**
   * Format a lifelog as markdown
   */
  private formatAsMarkdown(lifelog: Lifelog): string {
    const date = new Date(lifelog.startTime);
    const duration = new Date(lifelog.endTime).getTime() - new Date(lifelog.startTime).getTime();
    const durationMinutes = Math.round(duration / 60000);

    return `# ${lifelog.title}

**Metadata:**
- **Date:** ${date.toLocaleString()}
- **Duration:** ${durationMinutes} minutes
- **ID:** ${lifelog.id}
- **Starred:** ${lifelog.isStarred ? '‚≠ê Yes' : 'No'}

---

${lifelog.markdown || 'No transcript available.'}

---

*Transcript generated by Ghost AI Assistant on ${new Date().toLocaleString()}*`;
  }

  /**
   * Save a single lifelog as a markdown file
   */
  async saveLifelog(lifelog: Lifelog): Promise<string> {
    await this.ensureDirectory();

    const filename = this.generateFilename(lifelog);
    const filepath = join(this.transcriptsDir, filename);
    const markdown = this.formatAsMarkdown(lifelog);

    await writeFile(filepath, markdown, 'utf-8');
    return filepath;
  }

  /**
   * Save multiple lifelogs as individual markdown files
   */
  async saveLifelogs(lifelogs: Lifelog[]): Promise<string[]> {
    const savedFiles: string[] = [];

    for (const lifelog of lifelogs) {
      try {
        const filepath = await this.saveLifelog(lifelog);
        savedFiles.push(filepath);
      } catch (error) {
        console.error(`Error saving lifelog ${lifelog.id}:`, error);
      }
    }

    return savedFiles;
  }

  /**
   * Save multiple lifelogs to a single markdown file
   */
  async saveLifelogsAsSingleFile(lifelogs: Lifelog[], filename: string): Promise<string> {
    await this.ensureDirectory();

    const filepath = join(this.transcriptsDir, filename);

    let content = `# Ghost AI Assistant - Transcript Collection\n\n`;
    content += `**Generated:** ${new Date().toLocaleString()}\n`;
    content += `**Total Recordings:** ${lifelogs.length}\n\n`;
    content += `---\n\n`;

    for (const lifelog of lifelogs) {
      content += this.formatAsMarkdown(lifelog);
      content += `\n\n---\n\n`;
    }

    await writeFile(filepath, content, 'utf-8');
    return filepath;
  }

  /**
   * Get the transcripts directory path
   */
  getTranscriptsDir(): string {
    return this.transcriptsDir;
  }
}